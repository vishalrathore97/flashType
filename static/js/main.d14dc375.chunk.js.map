{"version":3,"sources":["assets/logo.png","components/Navbar/Navbar.jsx","assets/hero.png","components/Landing/Landing.jsx","components/TryAgain/TryAgain.jsx","components/ChallengeDetailsCard/ChallengeDetailsCard.jsx","components/TestLetter/TestLetter.jsx","components/TypingChallengeMain/TypingChallengeMain.jsx","components/TypingChallenge/TypingChallenge.jsx","components/TestContainer/TestContainer.jsx","components/ChallengeSection/ChallengeSection.jsx","components/App/App.jsx","index.js"],"names":["Navbar","className","src","Logo","alt","Landing","data-aos","options","strings","autoStart","loop","hero","TryAgain","words","characters","wpm","onRetry","onClick","window","open","ChallengeDetailsCard","cardName","cardValue","TestLetter","letterInfo","testClass","correct","incorrect","notAttempted","status","testLetter","TypingChallengeMain","onInputChange","timerStarted","timeRemaining","testInfo","map","index","onPaste","e","preventDefault","onChange","target","value","placeholder","TypingChallenge","selectedPara","serviceUrl","TestContainer","useState","setTestInfo","isCompleted","setIsCompleted","setWpm","setWords","setCharacters","setTimerStarted","setTimeRemaining","setSelectedPara","useEffect","timer","fetch","then","para","text","info","split","l","setInterval","wordPerMin","timeSpent","parseInt","prevTime","clearInterval","fetchNewPara","input","correctCharacters","length","testInfoDup","statuses","i","correctWords","reduce","total","next","search","some","obj","includes","ChallengeSection","App","state","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d14dc375.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.904ac8fd.png\";","import React from \"react\";\r\nimport Logo from \"./../../assets/logo.png\";\r\nimport \"./Navbar.css\";\r\n\r\nconst Navbar = () => {\r\n  return (\r\n    <div className=\"navbar-container\">\r\n      <div className=\"nav-left\">\r\n        <img src={Logo} alt=\"logo\" className=\"flash-logo\" />\r\n        <p className=\"flash-logo-text\">FlashType</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Navbar;\r\n","export default __webpack_public_path__ + \"static/media/hero.96e141d3.png\";","import React from \"react\";\r\nimport hero from \"./../../assets/hero.png\";\r\nimport Typewriter from \"typewriter-effect\";\r\nimport \"./Landing.css\";\r\n\r\nconst Landing = () => {\r\n  return (\r\n    <div className=\"landing-container\">\r\n      <div data-aos=\"fade-right\" className=\"landing-left\">\r\n        <h1 className=\"landing-header\">Can you type...</h1>\r\n        <div className=\"typewriter-container\">\r\n          <Typewriter\r\n            options={{\r\n              strings: [\"Fast?\", \"Correct?\", \"Quick?\"],\r\n              autoStart: true,\r\n              loop: true,\r\n            }}\r\n          />\r\n        </div>\r\n      </div>\r\n      <div data-aos=\"fade-left\" className=\"landing-right\">\r\n        <img src={hero} alt=\"hero\" className=\"hero-logo\" />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Landing;\r\n","import React from \"react\";\r\nimport \"./TryAgain.css\";\r\n\r\nconst TryAgain = ({ words, characters, wpm, onRetry }) => {\r\n  return (\r\n    <div className=\"try-container\">\r\n      <h1>Test Results</h1>\r\n      <div className=\"test-results\">\r\n        <p>\r\n          <b>Words : </b>\r\n          {words}\r\n        </p>\r\n        <p>\r\n          <b>Characters : </b>\r\n          {characters}\r\n        </p>\r\n        <p>\r\n          <b>Speed : </b>\r\n          {wpm}wpm\r\n        </p>\r\n      </div>\r\n      <div className=\"button-container\">\r\n        <button onClick={() => onRetry()} className=\"end-buttons try-btn\">\r\n          Re-Try\r\n        </button>\r\n        <button\r\n          onClick={() => {\r\n            window.open(\r\n              \"https://www.facebook.com/sharer/sharer.php?u=https://github.com/vishalrathore97?tab=repositories\",\r\n              \"facebook-share-dialog\",\r\n              \"height=600,weight=700\"\r\n            );\r\n          }}\r\n          className=\"end-buttons share-btn\"\r\n        >\r\n          Share\r\n        </button>\r\n        <button\r\n          onClick={() => {\r\n            window.open(\r\n              \"https://www.twitter.com/intent/tweet?text=https://github.com/vishalrathore97?tab=repositories\",\r\n              \"twwet-share-dialog\",\r\n              \"height=600,weight=700\"\r\n            );\r\n          }}\r\n          className=\"end-buttons tweet-btn\"\r\n        >\r\n          Tweet\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TryAgain;\r\n","import React from \"react\";\r\nimport \"./ChallengeDetailsCard.css\";\r\n\r\nconst ChallengeDetailsCard = ({ cardName, cardValue }) => {\r\n  return (\r\n    <div className=\"card\">\r\n      <p className=\"card-name\">{cardName}</p>\r\n      <p className=\"card-value\">{cardValue}</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChallengeDetailsCard;\r\n","import React from \"react\";\r\nimport \"./TestLetter.css\";\r\n\r\nconst TestLetter = ({ letterInfo }) => {\r\n  const { status } = letterInfo;\r\n  const testClass = {\r\n    correct: \"test-letter-correct\",\r\n    incorrect: \"test-letter-incorrect\",\r\n    notAttempted: \"test-letter-not-attempted\",\r\n  }[status];\r\n  return (\r\n    <span className={`test-letter ${testClass}`}>{letterInfo.testLetter}</span>\r\n  );\r\n};\r\n\r\nexport default TestLetter;\r\n","import React from \"react\";\r\nimport TestLetter from \"../TestLetter/TestLetter\";\r\nimport \"./TypingChallengeMain.css\";\r\n\r\nconst TypingChallengeMain = ({\r\n  onInputChange,\r\n  timerStarted,\r\n  timeRemaining,\r\n  testInfo,\r\n}) => {\r\n  return (\r\n    <div className=\"main-typing-section\">\r\n      <div className=\"timer\">\r\n        <p className=\"timer-text\">\r\n          {timeRemaining < 10 ? `00:0${timeRemaining}` : `00:${timeRemaining}`}\r\n        </p>\r\n        {!timerStarted && (\r\n          <p className=\"timer-info\">Start typing to start the test.</p>\r\n        )}\r\n      </div>\r\n      <div className=\"textarea-section\">\r\n        <div className=\"textarea-left\">\r\n          <div className=\"test-para textarea\">\r\n            {testInfo.map((letterInfo, index) => (\r\n              <TestLetter key={index} letterInfo={letterInfo} />\r\n            ))}\r\n          </div>\r\n        </div>\r\n        <div className=\"textarea-right\">\r\n          <textarea\r\n            onPaste={(e) => {\r\n              e.preventDefault();\r\n              return false;\r\n            }}\r\n            onChange={(e) => onInputChange(e.target.value)}\r\n            className=\"textarea\"\r\n            placeholder=\"Start Typing Here...\"\r\n          ></textarea>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TypingChallengeMain;\r\n","import React from \"react\";\r\nimport ChallengeDetailsCard from \"../ChallengeDetailsCard/ChallengeDetailsCard\";\r\nimport TypingChallengeMain from \"../TypingChallengeMain/TypingChallengeMain\";\r\nimport \"./TypingChallenge.css\";\r\n\r\nconst TypingChallenge = ({\r\n  words,\r\n  characters,\r\n  wpm,\r\n  selectedPara,\r\n  timerStarted,\r\n  timeRemaining,\r\n  testInfo,\r\n  onInputChange,\r\n}) => {\r\n  return (\r\n    <div className=\"typing-challenge-container\">\r\n      <div className=\"details-card-container\">\r\n        <ChallengeDetailsCard cardName=\"Words\" cardValue={words} />\r\n        <ChallengeDetailsCard cardName=\"Characters\" cardValue={characters} />\r\n        <ChallengeDetailsCard cardName=\"Speed(wpm)\" cardValue={wpm} />\r\n      </div>\r\n\r\n      <TypingChallengeMain\r\n        timerStarted={timerStarted}\r\n        timeRemaining={timeRemaining}\r\n        selectedPara={selectedPara}\r\n        testInfo={testInfo}\r\n        onInputChange={onInputChange}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TypingChallenge;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport TryAgain from \"../TryAgain/TryAgain\";\r\nimport TypingChallenge from \"../TypingChallenge/TypingChallenge\";\r\nimport \"./TestContainer.css\";\r\n\r\nconst serviceUrl = \"http://www.metaphorpsum.com/paragraphs/1/9\";\r\nconst totalTime = 60;\r\n\r\nconst TestContainer = () => {\r\n  const [testInfo, setTestInfo] = useState([]);\r\n  const [isCompleted, setIsCompleted] = useState(false);\r\n  const [wpm, setWpm] = useState(0);\r\n  const [words, setWords] = useState(0);\r\n  const [characters, setCharacters] = useState(0);\r\n  const [timerStarted, setTimerStarted] = useState(false);\r\n  const [timeRemaining, setTimeRemaining] = useState(totalTime);\r\n  const [selectedPara, setSelectedPara] = useState(\"hi\");\r\n\r\n  useEffect(() => {\r\n    if (selectedPara === \"hi\") {\r\n      fetch(serviceUrl)\r\n        .then((para) => para.text())\r\n        .then((info) => {\r\n          const letterArr = info.split(\"\");\r\n          const testInfo = letterArr.map((l) => {\r\n            return { testLetter: l, status: \"notAttempted\" };\r\n          });\r\n          setSelectedPara(info);\r\n          setTestInfo(testInfo);\r\n        });\r\n    }\r\n    let timer;\r\n    if (timerStarted) {\r\n      timer = setInterval(() => {\r\n        if (timeRemaining > 0) {\r\n          const timeSpent = totalTime - timeRemaining;\r\n          let wordPerMin;\r\n          if (timeSpent > 0) {\r\n            wordPerMin = parseInt((words / timeSpent) * 60);\r\n            setWpm(wordPerMin);\r\n          }\r\n          setTimeRemaining((prevTime) => prevTime - 1);\r\n        } else {\r\n          clearInterval(timer);\r\n        }\r\n      }, 1000);\r\n    }\r\n    return () => clearInterval(timer);\r\n  }, [timeRemaining, timerStarted]);\r\n\r\n  const handleInputChange = (input) => {\r\n    if (!timerStarted) {\r\n      setTimerStarted(true);\r\n    }\r\n    const characters = input.length;\r\n    let correctCharacters = 0;\r\n    const index = characters - 1;\r\n    const testInfoDup = [...testInfo];\r\n    let statuses = \"\";\r\n    for (let i = 0; i < selectedPara.length; i++) {\r\n      if (testInfoDup[i].testLetter === \" \") {\r\n        testInfoDup[i].status = \"space\";\r\n      } else if (i <= index) {\r\n        testInfoDup[i].status =\r\n          input[i] === selectedPara[i] ? \"correct\" : \"incorrect\";\r\n      } else {\r\n        testInfoDup[i].status = \"notAttempted\";\r\n      }\r\n      statuses += testInfoDup[i].status;\r\n      if (testInfoDup[i].status === \"correct\") correctCharacters++;\r\n    }\r\n    const wordsArr = statuses.split(\"space\");\r\n    const correctWords = wordsArr.reduce((total, next) => {\r\n      if (next.search(/(incorrect|notAttempted)/) === -1) {\r\n        total++;\r\n      }\r\n      return total;\r\n    }, 0);\r\n    setTestInfo(testInfoDup);\r\n    setWords(correctWords);\r\n    setCharacters(correctCharacters);\r\n    const isDone = !testInfoDup.some((obj) =>\r\n      [\"incorrect\", \"notAttempted\"].includes(obj.status)\r\n    );\r\n    if (isDone) setIsCompleted(true);\r\n  };\r\n\r\n  const handleRetry = () => {\r\n    fetchNewPara();\r\n    setCharacters(0);\r\n    setWords(0);\r\n    setWpm(0);\r\n    setIsCompleted(false);\r\n    setTimerStarted(false);\r\n    setTimeRemaining(60);\r\n  };\r\n\r\n  const fetchNewPara = () => {\r\n    fetch(serviceUrl)\r\n      .then((para) => para.text())\r\n      .then((info) => {\r\n        const letterArr = info.split(\"\");\r\n        const testInfo = letterArr.map((l) => {\r\n          return { testLetter: l, status: \"notAttempted\" };\r\n        });\r\n        setSelectedPara(info);\r\n        setTestInfo(testInfo);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div className=\"test-container\">\r\n      {timeRemaining && !isCompleted > 0 ? (\r\n        <TypingChallenge\r\n          wpm={wpm}\r\n          words={words}\r\n          characters={characters}\r\n          timerStarted={timerStarted}\r\n          timeRemaining={timeRemaining}\r\n          selectedPara={selectedPara}\r\n          testInfo={testInfo}\r\n          onInputChange={handleInputChange}\r\n        />\r\n      ) : (\r\n        <div className=\"try-again-section\">\r\n          <TryAgain\r\n            wpm={wpm}\r\n            words={words}\r\n            characters={characters}\r\n            onRetry={handleRetry}\r\n          />\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TestContainer;\r\n","import React from \"react\";\r\nimport TestContainer from \"../TestContainer/TestContainer\";\r\nimport \"./ChallengeSection.css\";\r\n\r\nconst ChallengeSection = () => {\r\n  return (\r\n    <div className=\"challenge-section-container\">\r\n      <h1 data-aos=\"fade-down\" className=\"challenge-section-header\">\r\n        Take a speed test now!\r\n      </h1>\r\n      <TestContainer />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChallengeSection;\r\n","import React, { Component } from \"react\";\r\nimport Navbar from \"./../Navbar/Navbar\";\r\nimport Landing from './../Landing/Landing';\r\nimport ChallengeSection from \"../ChallengeSection/ChallengeSection\";\r\nimport \"./App.css\";\r\n\r\nclass App extends Component {\r\n  state = {};\r\n  render() {\r\n    return (\r\n      <div className=\"app\">\r\n        <Navbar />\r\n        <Landing/>\r\n        <ChallengeSection/>\r\n        {/*footer */}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./components/App/App\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}